# This Cleaner instance finds all ConfigMaps in a given namespace "test" that start with same prefix "dynamic-config-properties"
# Those ConfigMaps were all generated by kustomize ConfigMapGenerator. 
# Cleaner will delete all such instances, leaving only the one was created last (by looking at the creation timestamp)
apiVersion: apps.projectsveltos.io/v1alpha1
kind: Cleaner
metadata:
  name: unused-configmaps
spec:
  schedule: "* 0 * * *"
  action: Delete
  resourcePolicySet:
    resourceSelectors:
    - kind: ConfigMap
      group: ""
      version: v1
      namespace: test # namespace where to look for ConfigMaps
    aggregatedSelection: |
      namePrefix = "dynamic-config-properties-" -- all ConfigMap with this name prefix

      -- This function returns true if name starts with prefix
      function hasPrefix(name, prefix)
        local prefixLength = string.len(prefix) -- Get the length of the prefix
        return string.sub(name, 1, prefixLength) == prefix
      end

      --  Convert creationTimestamp "2023-12-12T09:35:56Z"
      function convertTimestampString(timestampStr)
        local convertedTimestamp = string.gsub(
          timestampStr,
          '(%d+)-(%d+)-(%d+)T(%d+):(%d+):(%d+)Z',
          function(y, mon, d, h, mi, s)
            return os.time({
              year = tonumber(y),
              month = tonumber(mon),
              day = tonumber(d),
              hour = tonumber(h),
              min = tonumber(mi),
              sec = tonumber(s)
            })
          end
        )
        return convertedTimestamp
      end

      function evaluate()
        local hs = {}
        hs.message = ""

        local configMaps = {}
        local duplicateConfigMaps = {}

        -- Find all ConfigMap with namePrefix
        for _, resource in ipairs(resources) do
            if hasPrefix(resource.metadata.name, namePrefix) then
              table.insert(duplicateConfigMaps, resource)
            end
        end

        -- Out of duplicate ConfigMaps, find the one that was created last
        local mostRecentResource = nil
        local latestTimestamp = os.time()


        for _, configMap in ipairs(duplicateConfigMaps) do
          creationTimestamp = convertTimestampString(configMap.metadata.creationTimestamp)

          timeDifference = os.difftime(tonumber(creationTimestamp), latestTimestamp)

          -- Check if the current resource has a later timestamp
          if timeDifference < 0 then
            mostRecentResource = configMap
            latestTimestamp = tonumber(creationTimestamp)
          end
        end

        local oldConfigMaps = {}
        for _, configMap in ipairs(duplicateConfigMaps) do
           if configMap.metadata.name ~= mostRecentResource.metadata.name then
             print("ConfigMap is duplicate: ", configMap.metadata.name) 
             table.insert(oldConfigMaps, {resource = configMap})
           end 
        end

        if #oldConfigMaps > 0 then
          hs.resources = oldConfigMaps
        end
        return hs
      end
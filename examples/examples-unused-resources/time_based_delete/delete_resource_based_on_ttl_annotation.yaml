# This Cleaner automatically manages resource lifespans:
# It executes hourly tasks to:
# - Identify eligible resources: Discover Deployments, StatefulSets, and Services bearing the cleaner/ttl annotation, indicating their maximum lifespan.
# - Interpret time-to-live values: Decode cleaner/ttl annotations, which specify durations using a number followed by a suffix:
#   s: seconds
#   m: minutes
#   h: hours
#   d: days
#   w: weeks
# - Execute resource removal: Purge resources that have surpassed their specified time-to-live, ensuring a streamlined environment.
#
# Example cleaner/ttl values:
#   360s: 360 seconds
#   10m: 10 minutes
#   24h: 24 hours
#   7d: 7 days
#   2w: 2 weeks
# 
# If you want to filter resources based on namespace =>
#     - kind: Deployment
#       group: "apps"
#       version: v1
#       namespace: <YOUR_NAMESPACE>
#
# If you want to filter resources based on labels =>
#     - kind: Deployment
#       group: "apps"
#       version: v1
#       labelFilters:
#       - key: app
#         operation: Equal
#         value: nginx 
#       - key: environment
#         operation: Different
#         value: prouction 
#
# If you need further filtering modify `function evaluate` you can access any
# field of obj
#
# If you want to remove any other resource including your own custom resources
# replace/add kind/group/version to resourceSelectors
#
apiVersion: apps.projectsveltos.io/v1alpha1
kind: Cleaner
metadata:
  name: ttl-based-cleaner
spec:
  schedule: "0 * * * *"
  resourcePolicySet:
    resourceSelectors:
    - kind: Deployment
      group: "apps"
      version: v1
    - kind: StatefulSet
      group: "apps"
      version: v1
    - kind: Service
      group: ""
      version: v1
    aggregatedSelection: |
        --  Convert creationTimestamp "2023-12-12T09:35:56Z"
        function convertTimestampString(timestampStr)
          local convertedTimestamp = string.gsub(
            timestampStr,
            '(%d+)-(%d+)-(%d+)T(%d+):(%d+):(%d+)Z',
            function(y, mon, d, h, mi, s)
              return os.time({
                year = tonumber(y),
                month = tonumber(mon),
                day = tonumber(d),
                hour = tonumber(h),
                min = tonumber(mi),
                sec = tonumber(s)
              })
            end
          )
          return convertedTimestamp
        end

        -- Convert ttl to seconds 
        function toSeconds(durationString)
          local number, suffix = durationString:match("^(%d+)(%a)$")

          if not number or not suffix then
            print("Invalid duration string format")
            return 0
          end

          local multipliers = {
            s = 1,
            m = 60,
            h = 60 * 60,
            d = 60 * 60 * 24,
            w = 60 * 60 * 24 * 7
          }

          local multiplier = multipliers[suffix]
          if not multiplier then
            print("Invalid duration suffix: " .. suffix)
          end

          return number * multiplier
        end

        function getResourceKey(resource)
          return resource.kind .. ":" .. resource.metadata.namespace .. ":" .. resource.metadata.name
        end

        -- Any resources that have surpassed their specified time-to-live, will be deleted
        function evaluate()
          hs = {}

          local expiredResources = {}
          
          currentTime = os.time()

          for _, resource in ipairs(resources) do
            if resource.metadata.annotations ~= nil then
              if resource.metadata.annotations["cleaner/ttl"] then
                ttl = resource.metadata.annotations["cleaner/ttl"]
                removeAfter = toSeconds(ttl)
                if removeAfter > 0 then
                  creationTimestamp = convertTimestampString(resource.metadata.creationTimestamp)
                  print('creationTimestamp: ' .. creationTimestamp)
                  print('currentTime: ' .. currentTime)
                  timeDifference = os.difftime(currentTime, tonumber(creationTimestamp))
                  resourceKey = getResourceKey(resource)
                  print(resourceKey .. ' timeDifference: ' .. timeDifference)
                  -- if resource has been running for over ttl
                  if timeDifference > removeAfter then
                     table.insert(expiredResources, {resource = resource})
                  end
                end
              end
            end
          end

          if #expiredResources > 0 then
            hs.resources = expiredResources
          end

        return hs
        end
  action: Delete

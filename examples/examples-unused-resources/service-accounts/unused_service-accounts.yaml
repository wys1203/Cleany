# This Cleaner instance finds all unused ServiceAccounts instances. All namespaces are considered.
# A ServiceAccount is unused if:
# - used by no Pod instance
# - referenced in no RoleBinding
# - referenced in no ClusterRoleBinding
apiVersion: apps.projectsveltos.io/v1alpha1
kind: Cleaner
metadata:
  name: unused-service-accounts
spec:
  schedule: "* 0 * * *"
  action: Delete
  resourcePolicySet:
    resourceSelectors:
    - kind: Pod
      group: ""
      version: v1
    - kind: ServiceAccount
      group: ""
      version: v1
    - kind: RoleBinding
      group: "rbac.authorization.k8s.io"
      version: v1
    - kind: ClusterRoleBinding
      group: "rbac.authorization.k8s.io"
      version: v1
    aggregatedSelection: |
      function getKey(namespace, name)
        return namespace .. ":" .. name
      end

      function addRoleBindingServiceAccounts(roleBinding, usedServiceAccounts)
        if roleBinding.subjects ~= nil then
          for _,subject in ipairs(roleBinding.subjects) do
            if subject.kind == "ServiceAccount" then
              key = getKey(roleBinding.metadata.namespace, subject.name)
              usedServiceAccounts[key] = true
            end
          end
        end
      end

      function addClusterRoleBindingServiceAccounts(clusterRoleBinding, usedServiceAccounts)
        if clusterRoleBinding.subjects ~= nil then
          for _,subject in ipairs(clusterRoleBinding.subjects) do
            if subject.kind == "ServiceAccount" then
              key = getKey(subject.namespace, subject.name)
              usedServiceAccounts[key] = true
            end
          end
        end
      end

      function addPodServiceAccount(pod, usedServiceAccounts)
        if pod.spec.serviceAccountName ~= nil then
          serviceAccount = pod.spec.serviceAccountName
        else 
          serviceAccount = "default"
        end
        key = getKey(pod.metadata.namespace, serviceAccount)
        usedServiceAccounts[key] = true
      end

      function evaluate()
        local hs = {}
        hs.message = ""

        local serviceAccounts = {}
        local usedServiceAccounts = {}
        local unusedServiceAccounts = {}

        for _, resource in ipairs(resources) do
          local kind = resource.kind
          if kind == "ServiceAccount" then
            table.insert(serviceAccounts, resource)
          elseif kind == "Pod" then
            addPodServiceAccount(resource, usedServiceAccounts)
          elseif kind == "RoleBinding" then
            addRoleBindingServiceAccounts(resource, usedServiceAccounts)
          elseif kind == "ClusterRoleBinding" then
            addClusterRoleBindingServiceAccounts(resource, usedServiceAccounts)              
          end
        end

        -- walk all existing serviceAccounts and find the unused ones
        for _,serviceAccount in ipairs(serviceAccounts) do
          key = getKey(serviceAccount.metadata.namespace, serviceAccount.metadata.name)
          if not usedServiceAccounts[key] then
            table.insert(unusedServiceAccounts, {resource = serviceAccount})
          end
        end

        if #unusedServiceAccounts > 0 then 
          hs.resources = unusedServiceAccounts
        end
        return hs
      end